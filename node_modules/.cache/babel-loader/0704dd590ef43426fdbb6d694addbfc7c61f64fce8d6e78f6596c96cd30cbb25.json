{"ast":null,"code":"var _jsxFileName = \"/Users/meddo/Documents/GitHub/To-do-list-with-react/to-do-aapp/src/components/form/index.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Form = _ref => {\n  _s();\n  let {\n    setList\n  } = _ref;\n  const [form, setForm] = useState('');\n  function changeHandler(e) {\n    setForm(e.target.value);\n  }\n  function submitHandler(e) {\n    e.preventDefault();\n    if (form === '') {\n      return false;\n    } else {\n      setList(prev => [...prev, {\n        task: form,\n        completed: false,\n        id: Math.random() * 1000\n      }]);\n      setForm('');\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"asdfasdfasdfasdfasdf\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: submitHandler,\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: changeHandler,\n          value: form,\n          className: \"new-todo\",\n          placeholder: \"What needs to be done?\",\n          autoFocus: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n_s(Form, \"o5cNWS/fMsfzt8gFqFJ95Iaa28Y=\");\n_c = Form;\nexport default Form;\nvar _c;\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"names":["useState","Form","setList","form","setForm","changeHandler","e","target","value","submitHandler","preventDefault","prev","task","completed","id","Math","random"],"sources":["/Users/meddo/Documents/GitHub/To-do-list-with-react/to-do-aapp/src/components/form/index.js"],"sourcesContent":["import { useState } from 'react';\n\nconst Form = ({ setList }) => {\n    const [form, setForm] = useState('')\n\n    function changeHandler(e) {\n        setForm(e.target.value)\n    }\n    function submitHandler(e) {\n        e.preventDefault();\n        if (form === '') {\n            return false\n        } else {\n            setList(prev => [...prev, { task: form, completed: false, id: Math.random() * 1000 }]);\n            setForm('')\n        }\n    }\n\n    return (\n        <>\n            <header className=\"header\">\n                <h1>asdfasdfasdfasdfasdf</h1>\n                <form onSubmit={submitHandler}>\n                    <input onChange={changeHandler} value={form} className=\"new-todo\" placeholder=\"What needs to be done?\" autoFocus />\n                </form>\n            </header>\n        </>\n    );\n}\n\nexport default Form;"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAAC;AAAA;AAEjC,MAAMC,IAAI,GAAG,QAAiB;EAAA;EAAA,IAAhB;IAAEC;EAAQ,CAAC;EACrB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGJ,QAAQ,CAAC,EAAE,CAAC;EAEpC,SAASK,aAAa,CAACC,CAAC,EAAE;IACtBF,OAAO,CAACE,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EAC3B;EACA,SAASC,aAAa,CAACH,CAAC,EAAE;IACtBA,CAAC,CAACI,cAAc,EAAE;IAClB,IAAIP,IAAI,KAAK,EAAE,EAAE;MACb,OAAO,KAAK;IAChB,CAAC,MAAM;MACHD,OAAO,CAACS,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAE;QAAEC,IAAI,EAAET,IAAI;QAAEU,SAAS,EAAE,KAAK;QAAEC,EAAE,EAAEC,IAAI,CAACC,MAAM,EAAE,GAAG;MAAK,CAAC,CAAC,CAAC;MACtFZ,OAAO,CAAC,EAAE,CAAC;IACf;EACJ;EAEA,oBACI;IAAA,uBACI;MAAQ,SAAS,EAAC,QAAQ;MAAA,wBACtB;QAAA,UAAI;MAAoB;QAAA;QAAA;QAAA;MAAA,QAAK,eAC7B;QAAM,QAAQ,EAAEK,aAAc;QAAA,uBAC1B;UAAO,QAAQ,EAAEJ,aAAc;UAAC,KAAK,EAAEF,IAAK;UAAC,SAAS,EAAC,UAAU;UAAC,WAAW,EAAC,wBAAwB;UAAC,SAAS;QAAA;UAAA;UAAA;UAAA;QAAA;MAAG;QAAA;QAAA;QAAA;MAAA,QAChH;IAAA;MAAA;MAAA;MAAA;IAAA;EACF,iBACV;AAEX,CAAC;AAAA,GA1BKF,IAAI;AAAA,KAAJA,IAAI;AA4BV,eAAeA,IAAI;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}